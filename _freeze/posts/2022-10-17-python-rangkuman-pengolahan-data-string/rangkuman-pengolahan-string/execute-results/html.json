{
  "hash": "ecd360279837b63f9b737821fbacdcfd",
  "result": {
    "markdown": "---\ntitle: \"Rangkuman Pengolahan Data Tipe String Menggunakan Python\"\ndescription: |\n   Ringkasan pengolahan data tipe *string* pada Python mulai dari pendeklarasian variabel hingga metode manipulasi yang umum dilakukan.\ncategories: [Python, Struktur Data, String]\ndate: 2022-10-21\n---\n\n![](tb-python-string.png)\n\n# Pengenalan\n\n`string` merupakan salah satu tipe data yang umum digunakan pada bahasa Python selain `int`, `float` dan `boolen`. Tipe data: ini banyak digunakan untuk menampilkan informasi berupa pesan singkat maupun panjang terkait suatu hal. Pesan yang disampaikan dapat berupa peringanatan (`warning`), kesalahan (`error`) ataupun digunakan sebagai *debugger*.\n\n# Pengolahan Data\n\nTipe data `string` dapat dibuat menggunakan tanda kutip satu (`'`) atau kutip dua (`\"`). Praktik yang umum digunakan adalah menyatakan tipe data ini ke dalam variabel.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nnama = 'Budi Budiman'\n```\n:::\n\n\n## Metode *slicing*\n\nSetiap karakter (huruf, angka, tanda baca, atau simbol) pada `string` memiliki indeks atau posisi masing-masing. Indeks ini dimulai dari 0, 1, 2 hingga n - 1 (n merupakan panjang `string`). Untuk menampilkan nama depan dari variabel `nama` di atas dapat menggunakan pendekatan seperti di bawah ini.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nnama[0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'Budi'\n```\n:::\n:::\n\n\n*Slicing* dapat dilakukan dengan memasukkan indeks awal hingga akhir yang diinginkan `[indeks_awal:indeks_akhir]`. Karakter pada indeks akhir selalu tidak dimasukkan sehingga perlu menambah satu indeks setelahnya. Jadi jika menggunakan angka 3 pada indeks akhir, hasil yang didapat akan menampilkan `Bud`. Indeks nol (0) biasa tidak ditulis, sehingga contoh di atas dapat juga ditulis menjadi `nama[:4]`.\n\n## Metode `split()`\n\nHasil yang serupa juga didapatkan dengan menggunakan metode `split(delimiter)`, di mana pendekatan ini memisahkan `string` berdasarkan karakter yang digunakan (*delimiter* yang umumn digunakan ` `, `,`, `.`, `-` atau `_`). Luaran dari metode ini adalah objek `list`.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nnama.split(' ')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['Budi', 'Budiman']\n```\n:::\n:::\n\n\nUntuk menampilkan nama depan saja dapat menggunakan indeks 0.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnama.split(' ')[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'Budi'\n```\n:::\n:::\n\n\n## Metode `join()`\n\nMetode ini berfungsi untuk menggabungkan elemen pada objek `list`, `set` atau iterator lainnya menjadi sebuah objek `string`. Untuk menampilkan nama lengkap dari elemen `list` di bawah ini dapat menggunakan pendekatan `\"sep\".join(list)` di mana `sep` merupakan pembatas yang digunakan untuk mengabungkan setiap objek pada `list` tersebut. `sep` yang digunakan adalah spasi (` `) dan dapat berupa karakter lainnya seperti koma (`,`) atau strip (`-`).\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndaftar_nama = ['budi', 'budiman']\nnama_lengkap = ' '.join(daftar_nama)\nnama_lengkap\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'budi budiman'\n```\n:::\n:::\n\n\n## *Change case*\n\nPada contoh di atas, variabel `nama_lengkap` berada dalam bentuk huruf kecil. Untuk menggantinya menjadi penulisan nama yang baku (setiap awal kata menjadi kapital) dapat menggunakan pendekatan di bawah ini.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnama_lengkap.title()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'Budi Budiman'\n```\n:::\n:::\n\n\nSelain `title()` terdapat metode *change case* lainnya seperti `capitalize()`, `upper()`, `lower()` dan `swapcase()`.\n\n\n## Metode `format()`\n\nMetode ini berfungsi untuk mengkustomasi format dari string yang akan dihasilkan.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n\"Halo nama saya {0}, umur saya {1} tahun.\".format(nama_lengkap, 22)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'Halo nama saya budi budiman, umur saya 22 tahun.'\n```\n:::\n:::\n\n\nIndeks `0` dan `1` merujuk pada variabel atau nilai dari `nama_lengkap` dan `22` secara berurutan. Indeks tersebut dapat disebut sebagai *placeholder*. Nilai dari *placeholder* ini dapat diganti menjadi suatu variabel tertentu.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n\"Halo nama saya {nama}, umur saya {umur} tahun.\".format(nama=nama_lengkap, umur=22)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'Halo nama saya budi budiman, umur saya 22 tahun.'\n```\n:::\n:::\n\n\nSelain 2 pendekatan di atas, Python juga menyediakan fitur yang biasa disebut sebagai `f-string`. Fitur ini biasa digunakan karena dapat menyederhanakan penulisan *code*.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nf\"Halo nama saya {nama_lengkap}, umur saya {22} tahun.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'Halo nama saya budi budiman, umur saya 22 tahun.'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "rangkuman-pengolahan-string_files"
    ],
    "filters": [],
    "includes": {}
  }
}