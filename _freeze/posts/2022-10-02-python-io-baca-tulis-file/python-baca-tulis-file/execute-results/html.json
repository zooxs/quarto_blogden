{
  "hash": "8c95672d53fe519f2812c46ace88d298",
  "result": {
    "markdown": "---\ntitle: \"Membuat, Membaca dan Mengedit File Menggunakan Python\"\ndescription: |\n   Ringkasan pengolahan file menggunakan *built-in function* pada Python.\ncategories: [Python, I/O]\ndate: 2022-10-07\n---\n\n# Pengenalan\n\nPython termasuk ke dalam *general purpose programming languange* sehingga dapat digunakan untuk berbagai keperluan. Salah satu pemanfaatannya adalah pemrosesan file mulai dari pembuatan, pembacaan dan pengeditan dapat dilakukan bergantung jenis file yang diolah. Pada artikel ini ditunjukkan contoh pengolahan file tipe *plain text* atau file sederhana berisi tulisan (`.txt`) yang akan diproses menggunakan *built-in function* pada Python (`open()`) dan *context manager*.\n\n# Fungsi `open()`\n\n`open()` merupakan fungsi *built-in* (bawaan) pada Python. Fungsi ini bertujuan untuk membuka suatu file dengan mode tertentu seperti baca (*read*) atau tulis (*write*). Fungsi ini dapat dituliskan sebagai `open(path_file, mode)` dimana:\n\n- `path_file` merupakan lokasi dari file yang akan digunakan seperti `simpel.txt` atau `folder1/folder2/simpel.txt` jika file berada dalam folder tertentu.\n- `mode` pilihan operasi yang akan digunakan.\n\n| Opsi | Tujuan                                                   |\n|------|----------------------------------------------------------|\n| 'r'  | Membaca file (*default*)                                 |\n| 'w'  | Menulis file                                             |\n| 'x'  | Pembuatan ekslusif, gagal jika file telah ada            |\n| 'a'  | Menambahkan isi file di  akhir baris jika file telah ada |\n| 'b'  | Mode binary                                              |\n| 't'  | Mode teks (*default*)                                    |\n| '+'  | Mengedit file (*write*, *reading*)                       |\n\n: Mode opsi pada fungsi `open()`\n\nLebih lengkap dapat dilihat pada [sumber berikut](https://docs.python.org/3/library/functions.html#open) \n\n# *Context Manager* pada Python\n\n*Context manager* merupakan salah satu metode yang digunakan untuk mengatasi *memory leak* dari *external resources* (file dan koneksi internet). Metode ini dapat mengelolah *external resources* dengan menutupnya setelah tidak digunakan lagi sehingga dapat menghindari terjadinya *memory leak*. Salah satu pendekatan yang umum digunakan pada metode ini adalah menggunakan konstruktor `with` [@Python2021Context].\n\n# Pemrosesan File\n\n## Pembuatan (*write*) file\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nwith open('simpel.txt', 'w') as teks:\n   teks.write('Ini contoh teks')\n```\n:::\n\n\n## Pembacaan (*read*) file\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nwith open('simpel.txt', 'w+') as teks:\n   print(teks.read())\n   teks.write('100 + 200 = 300')\n   print(teks.read())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "python-baca-tulis-file_files"
    ],
    "filters": [],
    "includes": {}
  }
}