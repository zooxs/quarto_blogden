{
  "hash": "872142db8e371828946edafab7e9a760",
  "result": {
    "markdown": "---\ntitle: Pengenalan Dasar-dasar Pandas\ndescription: |\n  Dasar-dasar *library* Pandas yang perlu diketahui.\ndate: '2022-09-24'\ncategories:\n  - Python\n  - Pandas\n---\n\n![](pandas_logo.png)\n\n# Pendahuluan\n`Pandas` merupapkan salah satu *library* Python yang umum digunakan untuk keperluan *data analysis* karena memiliki banyak fitur yang memudahkan pengguna untuk mengolah data. Terdapat beberapa fitur umum statistik seperti `mean()`, `sum()`, `max()`, `min()`, dan `quantile()` sehingga pengguna dapat dengan mudah mendapatkan hasil nilainya. Pada artikel ini akan dibahas secara ringkas penggunaan `Pandas` pada *dataset titanic* dari *library* `Seaborn`.\n\n# Memuat Dataset\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport seaborn as sns\nimport pandas as pd\n\ndf = sns.load_dataset('titanic')\ndf.iloc[:5, :6]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nDataset berasal dari *library* `Seaborn` dan dibaca menggukana `Pandas`. Metode `.iloc[:5, :6]` berfungsi untuk menampilkan 5 baris pertama dan 6 kolom pertama dari data.\n\n## Ukuran dataset\n\nUkuran dataset (jumlah baris dan kolom) dapat diketahui dengan atribut `.shape`.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n(891, 15)\n```\n:::\n:::\n\n\n## Akses nama kolom\n\nNama kolom yang terdapat dalam dataset dapat diaksek menggunakan atribut `.columns`.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nIndex(['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',\n       'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town',\n       'alive', 'alone'],\n      dtype='object')\n```\n:::\n:::\n\n\n## Tipe data kolom\n\nTipe data setiap kolom dapat diketahui menggunakan atribut `.dtypes` pada dataset.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nsurvived          int64\npclass            int64\nsex              object\nage             float64\nsibsp             int64\nparch             int64\nfare            float64\nembarked         object\nclass          category\nwho              object\nadult_male         bool\ndeck           category\nembark_town      object\nalive            object\nalone              bool\ndtype: object\n```\n:::\n:::\n\n\nDari hasil di atas terlihat beberapa tipe data seperti `int64` untuk bilangan bulat, `float64` untuk bilangan desimal, `bool` untuk data `True` atau `False`, `object` untuk karakter atau kalimat dan `category` untuk kategori data.\n\n## Mengakses data pada kolom tertentu\n\nTerdapat dua cara umum untuk memanggil data pada kolom tertentu, menggunakan nama kolom sebagai indeks dan menggunakan nama kolom sebagai atribut.\n\n1. Nama kolom sebagai indeks\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf['age'].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0    22.0\n1    38.0\n2    26.0\n3    35.0\n4    35.0\nName: age, dtype: float64\n```\n:::\n:::\n\n\n2. Nama kolom sebagai atribut\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.age.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0    22.0\n1    38.0\n2    26.0\n3    35.0\n4    35.0\nName: age, dtype: float64\n```\n:::\n:::\n\n\nUntuk memanggil data pada beberapa kolom, cara paling mudah adalah dengan menggunakan `list` (daftar) yang berisi beberapa nama kolom.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf[['survived', 'age']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>22.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>26.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>35.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Pengolahan Dataset\n## Nilai minimum dan maksimum\nKedua nilai tersebut dapat ditentukan dengan metode `.min()` dan `.max()`. Diambil data pada kolom `age` sebagai contoh pada bagian ini.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(f'Nilai min: {df.age.min()}')\nprint(f'Nilai max: {df.age.max()}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNilai min: 0.42\nNilai max: 80.0\n```\n:::\n:::\n\n\n## Nilai rata-rata dan standar deviasi\nNilai tersebut dapat ditentukan dengan metode `.mean()` dan `.std()`.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nprint(f'Nilai mean: {df.age.mean()}')\nprint(f'Nilai std: {df.age.std()}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNilai mean: 29.69911764705882\nNilai std: 14.526497332334044\n```\n:::\n:::\n\n\n## Nilai kuantil\nNilai kuantil dapat ditentukan dengan metode `.quantile()`. Q10, Q20 maupun Q30 bisa diketahui dengan memasukkan parameter pada metode `.quantile(.10)`, `.quantile(.20)` dan `.quantile(.30)` untuk masing-masing nilai kuantil yang ingin dicari.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(f'Nilai Q10: {df.age.quantile(.10)}')\nprint(f'Nilai Q20: {df.age.quantile(.20)}')\nprint(f'Nilai Q30: {df.age.quantile(.30)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNilai Q10: 14.0\nNilai Q20: 19.0\nNilai Q30: 22.0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}