---
title: "Rangkuman Pengolahan Data Tipe String Menggunakan Python"
description: |
   Ringkasan pengolahan data tipe *string* pada Python mulai dari pendeklarasian variabel hingga metode manipulasi yang umum dilakukan.
categories: [Python, Struktur Data, String]
date: 2022-10-21
---

![](tb-python-string.png)

# Pengenalan

`string` merupakan salah satu tipe data yang umum digunakan pada bahasa Python selain `int`, `float` dan `boolen`. Tipe data: ini banyak digunakan untuk menampilkan informasi berupa pesan singkat maupun panjang terkait suatu hal. Pesan yang disampaikan dapat berupa peringanatan (`warning`), kesalahan (`error`) ataupun digunakan sebagai *debugger*.

# Pengolahan Data

Tipe data `string` dapat dibuat menggunakan tanda kutip satu (`'`) atau kutip dua (`"`). Praktik yang umum digunakan adalah menyatakan tipe data ini ke dalam variabel.

```{python}
nama = 'Budi Budiman'
```

## Metode *slicing*

Setiap karakter (huruf, angka, tanda baca, atau simbol) pada `string` memiliki indeks atau posisi masing-masing. Indeks ini dimulai dari 0, 1, 2 hingga n - 1 (n merupakan panjang `string`). Untuk menampilkan nama depan dari variabel `nama` di atas dapat menggunakan pendekatan seperti di bawah ini.

```{python}
nama[0:4]
```

*Slicing* dapat dilakukan dengan memasukkan indeks awal hingga akhir yang diinginkan `[indeks_awal:indeks_akhir]`. Karakter pada indeks akhir selalu tidak dimasukkan sehingga perlu menambah satu indeks setelahnya. Jadi jika menggunakan angka 3 pada indeks akhir, hasil yang didapat akan menampilkan `Bud`. Indeks nol (0) biasa tidak ditulis, sehingga contoh di atas dapat juga ditulis menjadi `nama[:4]`.

## Metode `split()`

Hasil yang serupa juga didapatkan dengan menggunakan metode `split(delimiter)`, di mana pendekatan ini memisahkan `string` berdasarkan karakter yang digunakan (*delimiter* yang umumn digunakan ` `, `,`, `.`, `-` atau `_`). Luaran dari metode ini adalah objek `list`.

```{python}
nama.split(' ')
```

Untuk menampilkan nama depan saja dapat menggunakan indeks 0.

```{python}
nama.split(' ')[0]
```

## Metode `join()`

Metode ini berfungsi untuk menggabungkan elemen pada objek `list`, `set` atau iterator lainnya menjadi sebuah objek `string`. Untuk menampilkan nama lengkap dari elemen `list` di bawah ini dapat menggunakan pendekatan `"sep".join(list)` di mana `sep` merupakan pembatas yang digunakan untuk mengabungkan setiap objek pada `list` tersebut. `sep` yang digunakan adalah spasi (` `) dan dapat berupa karakter lainnya seperti koma (`,`) atau strip (`-`).

```{python}
daftar_nama = ['budi', 'budiman']
nama_lengkap = ' '.join(daftar_nama)
nama_lengkap
```

## *Change case*

Pada contoh di atas, variabel `nama_lengkap` berada dalam bentuk huruf kecil. Untuk menggantinya menjadi penulisan nama yang baku (setiap awal kata menjadi kapital) dapat menggunakan pendekatan di bawah ini.

```{python}
nama_lengkap.title()
```

Selain `title()` terdapat metode *change case* lainnya seperti `capitalize()`, `upper()`, `lower()` dan `swapcase()`.


## Metode `format()`

Metode ini berfungsi untuk mengkustomasi format dari string yang akan dihasilkan.

```{python}
"Halo nama saya {0}, umur saya {1} tahun.".format(nama_lengkap, 22)
```

Indeks `0` dan `1` merujuk pada variabel atau nilai dari `nama_lengkap` dan `22` secara berurutan. Indeks tersebut dapat disebut sebagai *placeholder*. Nilai dari *placeholder* ini dapat diganti menjadi suatu variabel tertentu.

```{python}
"Halo nama saya {nama}, umur saya {umur} tahun.".format(nama=nama_lengkap, umur=22)
```

Selain 2 pendekatan di atas, Python juga menyediakan fitur yang biasa disebut sebagai `f-string`. Fitur ini biasa digunakan karena dapat menyederhanakan penulisan *code*.

```{python}
f"Halo nama saya {nama_lengkap}, umur saya {22} tahun."
```
